{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","name","id","email","className","alt","src","CardList","robots","console","log","cardsArray","map","user","i","key","Fragment","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","App","onRequestRobots","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.552db29e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n    const {name, id, email} = props; //deconstructing\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robot' src={`https://robohash.org/${id}?200x200`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../components/Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    console.log('CardList');\r\n    const cardsArray = robots.map((user, i) => {\r\n        return <Card key={i} id={user.id} name={user.name} email={user.email}/>\r\n    });\r\n\r\n    return(\r\n        <React.Fragment>\r\n            {cardsArray}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchField, searchChange}) => {\r\n    console.log('SearchBox');\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n              className='pa3 ba b--green bg-lightest-blue'\r\n              type='search'\r\n              placeholder='search robots'\r\n              onChange={searchChange} \r\n              />\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({hasError: true});\r\n    }\r\n\r\n    render(){\r\n        if (this.state.hasError) {\r\n            return <h1>Oooops. This is an error</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\n\r\nclass CounterButton extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n\r\n    //with this we make sure component will not update even if parent component is updated\r\n    shouldComponentUpdate(nextProps, nextState) {        \r\n        if(this.state.count !== nextProps.count){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    updateCount = () => {\r\n        //improved way to update, why? I donÂ´t know xD\r\n        this.setState( state => {\r\n            return {count: state.count + 1}\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        console.log('CounterButton');\r\n        return (\r\n            <button color={this.props.color} onClick={this.updateCount}>\r\n                Count: {this.state.count}\r\n            </button>    \r\n        )\r\n    }  \r\n}\r\n\r\nexport default CounterButton;\r\n","import React, { Component } from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\n\r\nclass Header extends Component {\r\n    \r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return false;\r\n    }\r\n    \r\n    render() {\r\n        console.log('Header');\r\n        return (\r\n            <div>                \r\n                <h1 className='f1'>Robofriends</h1>\r\n                <CounterButton color={'red'}/>\r\n            </div>            \r\n        );\r\n    }  \r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport Header from '../components/Header';\r\n\r\nimport './App.css';\r\nimport { requestRobots, setSearchField } from '../actions';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n     return {\r\n         onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n         onRequestRobots: () => dispatch(requestRobots())\r\n     }\r\n}\r\n\r\n\r\nclass App extends Component {\r\n    componentDidMount() {        \r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render(){\r\n        const {searchField, onSearchChange, robots, isPending, error} = this.props;\r\n        \r\n        const filteredRobots = robots.filter(robot =>{ \r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        });\r\n        \r\n        if(!isPending && error !== '')\r\n            return <h1>An error has ocurred</h1>\r\n\r\n        return isPending ?\r\n            <h1>Loading</h1> : \r\n           (               \r\n                <div className='tc'>\r\n                    <Header />\r\n                    <SearchBox searchChange={onSearchChange}/>\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList robots={filteredRobots} />\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                    \r\n                </div>\r\n            );\r\n    }\r\n}\r\n\r\n//connect returns another function that executes App as a parameter\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nexport const setSearchField = (text) => {\r\n    return {\r\n        type: CHANGE_SEARCH_FIELD,\r\n        payload: text   \r\n    }\r\n    \r\n};\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n        .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}\r\n\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch , action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload});\r\n            //equivalent syntax { ... state, searchField: action.payload);\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true});\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {isPending: false, robots: action.payload});\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {isPending: false, error: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { searchRobots, requestRobots } from './reducers';\r\nimport 'tachyons';\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({searchRobots, requestRobots});\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\n\r\n/*\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>    \r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n*/\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n      <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}